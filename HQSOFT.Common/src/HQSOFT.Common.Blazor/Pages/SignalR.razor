@page "/test"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.SignalR.Client;
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Users;
@inherits CommonComponentBase
@inject ICurrentTenant CurrentTenant
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider



<div class="container">

    <div class="form-group">
        <label>
            Signal R Connection State:@state
        </Label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>
    <ul id="messagesList">
        @foreach (var replyMessage in messages)
        {
            <li>@replyMessage</li>
        }
    </ul>
</div>

@code
{
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;
    private string? state;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (CurrentUser.IsAuthenticated)
        {
            var tokenResult = await TokenProvider.RequestAccessToken();
            var test = CurrentUser.Id;

            if (tokenResult.TryGetToken(out var token))
            {
                hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:44373/signalr-hubs/messaging", options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token.Value);
                }).Build();

                hubConnection.On<string>("MessageBackToBlazor", (message) =>
                                                                            {
                                                                                // Comes from Host
                                                                                var encodedMsg = $"Message: {message}";
                                                                                messages.Add(encodedMsg);
                                                                                StateHasChanged();
                                                                            });

                await hubConnection.StartAsync();


                state = hubConnection.State.ToString();
            }
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", messageInput);
        }
    }

                
    protected override async void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}